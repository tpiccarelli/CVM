### 

# Fixar diretório de trabalho para download, manuseio e arquivamento dos dados:
setwd(dir = "C:/Users/Tiago/Documents/Financeiro/CVM/Dados CVM")

# Carregar packages:
library(package = xlsx)
library(package = XML)
require(package = data.table)
    
# Leitura dos dados oriundos da consulta CVM (data.frame [nrow = i, ncol = 7):
cvmdata <- read.table(file = "*.txt")
    
# Estruturação do endereço dos links para download dos arquivos:
col_url <- as.character(cvmdata[,2])
urls <- substr (x = col_url, start = 6, stop = 121)
    
# Estruturação do código CVM para identificação das empresas:
col_ccvm <- as.character(cvmdata[,4])
ccvm <- substr (x = col_ccvm, start = 7, stop = 12)
    
    
    for (i in 1:(length(urls))) {
        
        # Nomeia arquivo:
        filename <- paste(ccvm[i],sep = "",".zip")
        
        # Baixa arquivo:
        download.file(url = urls[i], destfile = filename, mode = "wb")
        
        # Descompacta conteúdo baixado:
        unzip(zipfile = filename)
        
        # Remove arquivo "*.zip":
        file.remove(filename)
        
        # Renomeia extensão do arquivo "*.itr" para "*.zip":
        try(expr = {
            file.rename(from = list.files(pattern = ".itr"), to = filename)
        }, silent = T)
        # Obs.: a função "try" permite igorar erros (neste caso, ignora o erro que aponta inexistência de arquivo com extensão .itr)
        
        # Renomeia extensão do arquivo "*.dfp" para "*.zip":
        try(expr = {
            file.rename(from = list.files(pattern = ".dfp"), to = filename)
        }, silent = T)
        
        # Descompacta conteúdo da nova pasta:
        unzip(zipfile = filename)

        
            ### GERA ARQUIVOS .CSV PARA EXPORTAÇÃO PARA ACCESS/EXCEL:
        
            # Transfere dados para data frame:
            dados<-xmlToDataFrame("InfoFinaDFin.xml")

            # Fixar diretório de trabalho para download, manuseio e arquivamento dos dados:
            setwd(dir = "C:/Users/Tiago/Documents/Financeiro/CVM/Dados CVM/4T14")
            
            # Transfere data frame para arquivo .txt separado por vírgulas - padrão CSV (gera um arquivo .txt para cada data frame):
            write.csv(x = dados, file = paste0(ccvm[i],".txt"))

        
        ### GERA DATA TABLES NO ENVIRONMENT DO R:

        # Fixar diretório de trabalho para download, manuseio e arquivamento dos dados:
        setwd(dir = "C:/Users/Tiago/Documents/Financeiro/CVM/Dados CVM")    
                        
        # Ler o arquivo .xml:
        cvm_xml <- xmlTreeParse(file = "./InfoFinaDFin.xml")
        
        # Gerar o nó XML:
        raiz <- xmlRoot(x = cvm_xml)
        
        # Medir o comprimento dos dados XML:
        linhas <- length(raiz)
        
        # Criar vetores para geração do data.frame:
        contas <- array(data=0, dim = linhas)
        valores_BP <- array(data=0, dim = linhas)
        valores_DRE <- array(data=0, dim = linhas)
        
            # Estrutura:
            ## raiz [[x]][[y]][[z]]
            ## onde:
            ### [[x]]: nome da conta (x=1:length(raiz))
            #### xmlName(raiz[[1]][[n]]): header da coluna (n=1:18)
            ##### n=4: DescricaoConta1
            ##### n=8: ValorConta2
            ##### n=9: ValorConta3
            ##### n=14: ValorConta8
            ##### n=15: ValorConta9
            ##### n=18: ValorConta12
            ### [[y]]: Valor (4:DescricaoConta1; 8:ValorConta2; etc)
            ### [[z]]: restrição para visualizar somente o elemento do código XML (z=1)
        
        # Preencher valores nos vetores:
        for(j in 1:linhas){
            contas[j] <- xmlValue(raiz[[j]][[4]][[1]])
            valores_BP[j] <- as.numeric(xmlValue(raiz[[j]][[9]][[1]]))
            valores_DRE[j] <- as.numeric(xmlValue(raiz[[j]][[15]][[1]]))
        }
        
        # Criar data.table:
        assign(x = ccvm[i], value = data.table(ccvm=ccvm[i], DescricaoConta1=contas,Valor3=valores_BP, Valor9=valores_DRE))
        
        # Exclui arquivos:
        file.remove(list.files(pattern = ".xml"))
        file.remove(list.files(pattern = ".zip"))
        file.remove(list.files(pattern = ".fca"))
        file.remove(list.files(pattern = ".fre"))
        file.remove(list.files(pattern = ".dfp"))
        file.remove(list.files(pattern = ".itr"))
    }
    # Exclui objetos do environment:
    rm(cvmdata, dados, ccvm, col_ccvm, col_url, contas, cvm_xml, cvmdata, filename, i, j, linhas, raiz, urls, valores_BP, valores_DRE)
